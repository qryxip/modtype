language: rust

env:
  global:
    - RUST_BACKTRACE=full

matrix:
  include:
    - os: linux
      dist: trusty
      rust: stable
      env: |
        RUSTUP_HOST=x86_64-unknown-linux-gnu
        CLIPPY=true
        RUSTFMT=true
    - os: osx
      rust: stable
      env: |
        RUSTUP_HOST=x86_64-apple-darwin
        CLIPPY=true
        RUSTFMT=false
    - os: windows
      rust: stable
      env: |
        RUSTUP_HOST=x86_64-pc-windows-msvc
        CLIPPY=true
        RUSTFMT=false
    - os: linux
      dist: trusty
      rust: 1.34.2
      env: |
        RUSTUP_HOST=x86_64-unknown-linux-gnu
        CLIPPY=false
        RUSTFMT=false
    - os: osx
      rust: 1.34.2
      env: |
        RUSTUP_HOST=x86_64-apple-darwin
        CLIPPY=false
        RUSTFMT=false
    - os: windows
      rust: 1.34.2
      env: |
        RUSTUP_HOST=x86_64-pc-windows-msvc
        CLIPPY=false
        RUSTFMT=false

install:
  - rustup self update
  - rustup set default-host "$RUSTUP_HOST"
  - rustup update "$TRAVIS_RUST_VERSION"
  - rustc --version --verbose
  - cargo --version --verbose
  - |
    if [ "$CLIPPY" = true ]; then
      rustup component add clippy &&
      cargo clippy --version
    fi
  - |
    if [ "$RUSTFMT" = true ]; then
      rustup component add rustfmt &&
      rustfmt --version
    fi
  - |
    if [ "$TRAVIS_RUST_VERSION" = stable -a "$RUSTUP_HOST" = x86_64-unknown-linux-gnu -a "$TRAVIS_BRANCH" = master -a "$TRAVIS_PULL_REQUEST" = false ]; then
      cargo install cargo-kcov &&
      travis_retry bash -c 'cargo kcov --print-install-kcov-sh | sh' &&
      kcov --version &&
      cargo-kcov --version
    fi || true

script:
  - |
    if [ "RUSTFMT" = true ]; then
      cargo fmt --all -- --check
    fi
  - |
    if [ "$CLIPPY" = true ]; then
      cargo clippy --all --all-targets -- -D warnings
    else
      cargo check --all --all-targets
    fi
  - |
    if [ -f ~/.cargo/bin/cargo-kcov ]; then
      travis_retry cargo kcov --all && travis_retry bash -c 'bash <(curl -s https://codecov.io/bash)' ||
      cargo test --all
    else
      cargo test --all
    fi

notifications:
  email:
    on_success: always
    on_failure: always

branches:
  only:
    - master
